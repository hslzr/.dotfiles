#!/usr/bin/env zsh

# Set error handling
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print status messages
print_status() {
    echo -e "${BLUE}==>${NC} $1"
}

# Function to print success messages
print_success() {
    echo -e "${GREEN}==>${NC} $1"
}

# Function to print error messages
print_error() {
    echo -e "${RED}==>${NC} $1"
}

check_omz() {
    if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
        print_status "Oh My Zsh not found. Installing..."
        
        # Install Oh My Zsh
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        
        print_success "Oh My Zsh installed successfully!"
    else
        print_success "Oh My Zsh is already installed"
    fi
}

check_minimal_theme() {
    local minimal_theme="minimal"
    local minimal_theme_file="$HOME/.oh-my-zsh/themes/$minimal_theme"
    
    if [[ ! -f "$minimal_theme_file" ]]; then
        print_status "Minimal theme not found. Cloning..."
    else
        print_status "Minimal theme already exists. Deleting..."
        rm "$minimal_theme_file"
    fi

    ln -s "$HOME/.dotfiles/oh-my-zsh/themes/minimal.zsh-theme" "$minimal_theme_file"
    print_success "Minimal theme linked successfully!"
}
        

# Function to check if Homebrew is installed
check_homebrew() {
    if ! command -v brew >/dev/null 2>&1; then
        print_status "Homebrew not found. Installing Homebrew..."
        
        # Install Homebrew
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH for Apple Silicon Macs
        if [[ $(uname -m) == "arm64" ]]; then
            print_status "Configuring Homebrew for Apple Silicon..."
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ${ZDOTDIR:-$HOME}/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
        
        print_success "Homebrew installed successfully!"
    else
        print_success "Homebrew is already installed"
    fi
}

check_git() {
    if ! command -v git >/dev/null 2>&1; then
        print_error "Git not found"
        print_status "Installing Git..."
        brew install git
    else
        print_success "Git is already installed"
    fi
}

# Function to check if Neovim is installed
check_neovim() {
    if ! command -v nvim >/dev/null 2>&1; then
        print_status "Neovim not found. Installing via Homebrew..."
        
        # Install Neovim
        brew install neovim
        
        print_success "Neovim installed successfully!"
    else
        print_success "Neovim is already installed"
    fi
    return 0
}

# Function to setup Neovim configuration
setup_neovim() {
    local dotfiles_nvim="$HOME/.dotfiles/nvim"
    local config_dir="$HOME/.config"
    local nvim_config="$config_dir/nvim"
    
    # First ensure Neovim is installed
    check_neovim
    
    # Check if .config directory exists, create if it doesn't
    if [[ ! -d "$config_dir" ]]; then
        print_status "Creating .config directory..."
        mkdir -p "$config_dir"
    fi
    
    # Check if nvim config exists in dotfiles
    if [[ ! -d "$dotfiles_nvim" ]]; then
        print_error "Neovim configuration not found in dotfiles"
        return 1
    fi
    
    # Handle existing nvim config
    if [[ -d "$nvim_config" || -L "$nvim_config" ]]; then
        if [[ -L "$nvim_config" ]]; then
            print_status "Removing existing nvim config symlink..."
            rm "$nvim_config"
        else
            local timestamp=$(date "+%Y%m%d_%H%M%S")
            print_status "Existing nvim config found, creating backup..."
            mv "$nvim_config" "$nvim_config.backup.$timestamp"
        fi
    fi
    
    # Create symlink
    print_status "Creating symlink for nvim configuration..."
    ln -s "$dotfiles_nvim" "$nvim_config"
    print_success "Neovim configuration linked successfully!"
    
    # Install/Update plugins
    print_status "Installing/Updating Neovim plugins..."
    nvim +PlugInstall! +qall
    print_success "Neovim plugins installed/updated successfully!"
}

setup_dotfiles() {
    local dotfiles_dir="$HOME/.dotfiles"
    local timestamp=$(date "+%Y%m%d_%H%M%S")
    
    # Check if .dotfiles directory exists
    if [[ ! -d "$dotfiles_dir" ]]; then
        print_error "Dotfiles directory not found at $dotfiles_dir"
        return 1
    fi

    # Handle .zshrc
    if [[ -f "$dotfiles_dir/.zshrc" ]]; then
        # If .zshrc exists and is not already a symlink to our dotfiles
        if [[ -f "$HOME/.zshrc" && ! -L "$HOME/.zshrc" ]]; then
            print_status "Existing .zshrc found, creating backup..."
            mv "$HOME/.zshrc" "$HOME/.zshrc.backup.$timestamp"
        elif [[ -L "$HOME/.zshrc" ]]; then
            print_status "Removing existing .zshrc symlink..."
            rm "$HOME/.zshrc"
        fi
        
        print_status "Creating symlink for .zshrc..."
        ln -s "$dotfiles_dir/.zshrc" "$HOME/.zshrc"
        print_success ".zshrc symlink created successfully!"
    else
        print_error ".zshrc not found in dotfiles directory"
    fi
}

check_ghostty() {
    if ! command -v ghostty >/dev/null 2>&1; then
        print_status "Installing Ghostty..."
        
        # Install Ghostty
        brew install --cask ghostty
        
        print_success "Ghostty installed successfully!"
    else
        print_success "Ghostty is already installed"
    fi
    return 0
}

# Function to setup Ghostty configuration
setup_ghostty() {

    # First ensure Ghostty is installed
    check_ghostty

    local dotfiles_ghostty="$HOME/.dotfiles/ghostty/config"
    local ghostty_dir="$HOME/Library/Application Support/com.mitchellh.ghostty"
    local ghostty_config="$ghostty_dir/config"
    
    # Check if ghostty config exists in dotfiles
    if [[ ! -f "$dotfiles_ghostty" ]]; then
        print_error "Ghostty configuration not found in dotfiles"
        return 1
    fi
    
    # Create Ghostty config directory if it doesn't exist
    if [[ ! -d "$ghostty_dir" ]]; then
        print_status "Creating Ghostty configuration directory..."
        mkdir -p "$ghostty_dir"
    fi
    
    # Handle existing config
    if [[ -f "$ghostty_config" || -L "$ghostty_config" ]]; then
        print_status "Removing existing Ghostty config..."
        rm "$ghostty_config"
    fi
    
    # Create symlink
    print_status "Creating symlink for Ghostty configuration..."
    ln -s "$dotfiles_ghostty" "$ghostty_config"
    print_success "Ghostty configuration linked successfully!"
}


# Function to check if asdf is installed
check_asdf() {
    if ! command -v asdf >/dev/null 2>&1; then
        print_status "Installing asdf..."
        
        # Clone asdf repository
        git clone https://github.com/asdf-vm/asdf.git ${ZDOTDIR:-$HOME}/.asdf --branch v0.13.1
        
        # Add asdf initialization to zshrc
        local zshrc="${ZDOTDIR:-$HOME}/.zshrc"
        if ! grep -q "asdf.sh" "$zshrc"; then
            print_status "Adding asdf to zshrc..."
            echo -e "\n# asdf version manager" >> "$zshrc"
            echo '. "$HOME/.asdf/asdf.sh"' >> "$zshrc"
            echo 'fpath=(${ASDF_DIR}/completions $fpath)' >> "$zshrc"
            echo 'autoload -Uz compinit && compinit' >> "$zshrc"
        fi
        
        print_success "asdf installed! Please restart your shell or run: source ${zshrc}"
    else
        print_success "asdf is already installed"
    fi
}

# Main setup process
main() {
    print_status "Starting initial setup..."
    
    check_omz
    check_minimal_theme
    setup_dotfiles
    check_homebrew
    check_git
    check_asdf
    setup_neovim
    setup_ghostty
    
    print_success "Initial setup completed!"
}

# Run main function
main
